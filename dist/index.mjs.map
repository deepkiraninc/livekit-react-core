{"version":3,"sources":["../src/constants.ts","../src/utils.ts","../src/helper/detectMobileBrowser.ts","../src/helper/urlRegex.ts","../src/helper/emailRegex.ts","../src/helper/floating-menu.ts","../src/helper/tokenizer.ts","../src/helper/eventGroups.ts","../src/logger.ts","../src/helper/grid-layouts.ts","../src/helper/set-helper.ts","../src/types.ts","../src/sorting/sort-track-bundles.ts","../src/track-reference/track-reference.types.ts","../src/track-reference/track-reference.utils.ts","../src/sorting/base-sort-functions.ts","../src/sorting/sort-participants.ts","../src/helper/array-helper.ts","../src/track-reference/test-utils.ts","../src/sorting/tile-array-update.ts","../src/components/mediaToggle.ts","../src/observables/participant.ts","../src/observables/room.ts","../src/components/mediaTrack.ts","../src/styles-interface/class-prefixer.ts","../src/components/mediaDeviceSelect.ts","../src/components/disconnectButton.ts","../src/components/connectionQualityIndicator.ts","../src/components/trackMutedIndicator.ts","../src/components/participantName.ts","../src/components/participantTile.ts","../src/components/chat.ts","../src/observables/dataChannel.ts","../src/components/startAudio.ts","../src/components/chatToggle.ts","../src/components/shareLinkToggle.ts","../src/components/userToggle.ts","../src/components/focusToggle.ts","../src/components/clearPinButton.ts","../src/components/room.ts","../src/observables/track.ts","../src/observables/dom-event.ts","../src/index.ts"],"sourcesContent":["export const cssPrefix = 'lk';\r\n","import type { Participant, Track, TrackPublication } from 'livekit-client';\r\nimport { LocalParticipant, RemoteParticipant } from 'livekit-client';\r\n\r\nimport type { PinState } from './types';\r\n\r\nexport function isLocal(p: Participant) {\r\n  return p instanceof LocalParticipant;\r\n}\r\n\r\nexport function isRemote(p: Participant) {\r\n  return p instanceof RemoteParticipant;\r\n}\r\n\r\nexport const attachIfSubscribed = (\r\n  publication: TrackPublication | undefined,\r\n  element: HTMLMediaElement | null | undefined,\r\n) => {\r\n  if (!publication) return;\r\n  const { isSubscribed, track } = publication;\r\n  if (element && track) {\r\n    if (isSubscribed) {\r\n      track.attach(element);\r\n    } else {\r\n      track.detach(element);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Check if the participant track source is pinned.\r\n */\r\nexport function isParticipantSourcePinned(\r\n  participant: Participant,\r\n  source: Track.Source,\r\n  pinState: PinState | undefined,\r\n): boolean {\r\n  if (pinState === undefined) {\r\n    return false;\r\n  }\r\n\r\n  return pinState.some(\r\n    ({ source: pinnedSource, participant: pinnedParticipant }) =>\r\n      pinnedSource === source && pinnedParticipant.identity === participant.identity,\r\n  );\r\n}\r\n\r\n/**\r\n * Calculates the scrollbar width by creating two HTML elements\r\n * and messaging the difference.\r\n * @internal\r\n */\r\nexport function getScrollBarWidth() {\r\n  const inner = document.createElement('p');\r\n  inner.style.width = '100%';\r\n  inner.style.height = '200px';\r\n\r\n  const outer = document.createElement('div');\r\n  outer.style.position = 'absolute';\r\n  outer.style.top = '0px';\r\n  outer.style.left = '0px';\r\n  outer.style.visibility = 'hidden';\r\n  outer.style.width = '200px';\r\n  outer.style.height = '150px';\r\n  outer.style.overflow = 'hidden';\r\n  outer.appendChild(inner);\r\n\r\n  document.body.appendChild(outer);\r\n  const w1 = inner.offsetWidth;\r\n  outer.style.overflow = 'scroll';\r\n  let w2 = inner.offsetWidth;\r\n  if (w1 === w2) {\r\n    w2 = outer.clientWidth;\r\n  }\r\n  document.body.removeChild(outer);\r\n  const scrollBarWidth = w1 - w2;\r\n  return scrollBarWidth;\r\n}\r\n","function isWeb(): boolean {\r\n  return typeof document !== 'undefined';\r\n}\r\n\r\n/**\r\n * Mobile browser detection based on `navigator.userAgent` string.\r\n * Defaults to returning `false` if not in a browser.\r\n *\r\n * @remarks\r\n * This should only be used if feature detection or other methods do not work!\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#mobile_device_detection\r\n */\r\nexport function isMobileBrowser(): boolean {\r\n  return isWeb() ? /Mobi/i.test(window.navigator.userAgent) : false;\r\n}\r\n","// The MIT License (MIT)\r\n\r\n// Copyright (c) Kevin MÃ¥rtensson <kevinmartensson@gmail.com> and Diego Perini\r\n\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n\r\nimport { TLDs } from 'global-tld-list';\r\ninterface RegExOptions {\r\n  /**\r\n\t\tOnly match an exact string. Useful with `RegExp#test` to check if a string is a URL.\r\n\t\t@default false\r\n\t\t*/\r\n  readonly exact?: boolean;\r\n\r\n  /**\r\n\t\tForce URLs to start with a valid protocol or `www`. If set to `false` it'll match the TLD against a list of valid [TLDs](https://github.com/stephenmathieson/node-tlds).\r\n\t\t@default true\r\n\t\t*/\r\n  readonly strict?: boolean;\r\n}\r\n\r\nexport const createUrlRegExp = (options: RegExOptions) => {\r\n  options = {\r\n    strict: true,\r\n    ...options,\r\n  };\r\n\r\n  const protocol = `(?:(?:[a-z]+:)?//)${options.strict ? '' : '?'}`;\r\n  const auth = '(?:\\\\S+(?::\\\\S*)?@)?';\r\n  const ip = new RegExp(\r\n    '(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}',\r\n    'g',\r\n  ).source;\r\n  const host = '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9][-_]*)*[a-z\\\\u00a1-\\\\uffff0-9]+)';\r\n  const domain = '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*';\r\n  const tld = `(?:\\\\.${\r\n    options.strict\r\n      ? '(?:[a-z\\\\u00a1-\\\\uffff]{2,})'\r\n      : `(?:${TLDs.sort((a, b) => b.length - a.length).join('|')})`\r\n  })\\\\.?`;\r\n  const port = '(?::\\\\d{2,5})?';\r\n  const path = '(?:[/?#][^\\\\s\"]*)?';\r\n  const regex = `(?:${protocol}|www\\\\.)${auth}(?:localhost|${ip}|${host}${domain}${tld})${port}${path}`;\r\n\r\n  return options.exact ? new RegExp(`(?:^${regex}$)`, 'i') : new RegExp(regex, 'ig');\r\n};\r\n","import createEmailRegExp from 'email-regex';\r\n\r\nexport { createEmailRegExp };\r\n","import { computePosition, flip, offset, shift } from '@floating-ui/dom';\r\n\r\nexport async function computeMenuPosition(\r\n  button: HTMLElement,\r\n  menu: HTMLElement,\r\n): Promise<{ x: number; y: number }> {\r\n  const { x, y } = await computePosition(button, menu, {\r\n    placement: 'top',\r\n    middleware: [offset(6), flip(), shift({ padding: 5 })],\r\n  });\r\n  return { x, y };\r\n}\r\n\r\nexport function wasClickOutside(insideElement: HTMLElement, event: MouseEvent): boolean {\r\n  const isOutside = !insideElement.contains(event.target as Node);\r\n  return isOutside;\r\n}\r\n","import { createEmailRegExp } from './emailRegex';\r\nimport { createUrlRegExp } from './urlRegex';\r\n\r\nexport type TokenizeGrammar = { [type: string]: RegExp };\r\n\r\nexport const createDefaultGrammar = () => {\r\n  return {\r\n    email: createEmailRegExp(),\r\n    url: createUrlRegExp({ strict: false }),\r\n  } satisfies TokenizeGrammar;\r\n};\r\n\r\nexport function tokenize<T extends TokenizeGrammar>(input: string, grammar: T) {\r\n  const matches = Object.entries(grammar)\r\n    .map(([type, rx], weight) =>\r\n      Array.from(input.matchAll(rx)).map(({ index, 0: content }) => ({\r\n        type: type as keyof T,\r\n        weight,\r\n        content,\r\n        index: index ?? 0,\r\n      })),\r\n    )\r\n    .flat()\r\n    .sort((a, b) => {\r\n      const d = a.index - b.index;\r\n      return d !== 0 ? d : a.weight - b.weight;\r\n    })\r\n    .filter(({ index }, i, arr) => {\r\n      if (i === 0) return true;\r\n      const prev = arr[i - 1];\r\n      return prev.index + prev.content.length <= index;\r\n    });\r\n\r\n  const tokens = [];\r\n  let pos = 0;\r\n  for (const { type, content, index } of matches) {\r\n    if (index > pos) tokens.push(input.substring(pos, index));\r\n    tokens.push({ type, content });\r\n    pos = index + content.length;\r\n  }\r\n  if (input.length > pos) tokens.push(input.substring(pos));\r\n  return tokens;\r\n}\r\n","import { ParticipantEvent, RoomEvent } from 'livekit-client';\r\n\r\nexport const allRemoteParticipantRoomEvents = [\r\n  RoomEvent.ConnectionStateChanged,\r\n  RoomEvent.RoomMetadataChanged,\r\n\r\n  RoomEvent.ActiveSpeakersChanged,\r\n  RoomEvent.ConnectionQualityChanged,\r\n\r\n  RoomEvent.ParticipantConnected,\r\n  RoomEvent.ParticipantDisconnected,\r\n  RoomEvent.ParticipantPermissionsChanged,\r\n  RoomEvent.ParticipantMetadataChanged,\r\n\r\n  RoomEvent.TrackMuted,\r\n  RoomEvent.TrackUnmuted,\r\n  RoomEvent.TrackPublished,\r\n  RoomEvent.TrackUnpublished,\r\n  RoomEvent.TrackStreamStateChanged,\r\n  RoomEvent.TrackSubscriptionFailed,\r\n  RoomEvent.TrackSubscriptionPermissionChanged,\r\n  RoomEvent.TrackSubscriptionStatusChanged,\r\n];\r\n\r\nexport const allParticipantRoomEvents = [\r\n  ...allRemoteParticipantRoomEvents,\r\n  RoomEvent.LocalTrackPublished,\r\n  RoomEvent.LocalTrackUnpublished,\r\n];\r\n\r\nexport const allRemoteParticipantEvents = [\r\n  ParticipantEvent.ConnectionQualityChanged,\r\n  ParticipantEvent.IsSpeakingChanged,\r\n  ParticipantEvent.ParticipantMetadataChanged,\r\n  ParticipantEvent.ParticipantPermissionsChanged,\r\n\r\n  ParticipantEvent.TrackMuted,\r\n  ParticipantEvent.TrackUnmuted,\r\n  ParticipantEvent.TrackPublished,\r\n  ParticipantEvent.TrackUnpublished,\r\n  ParticipantEvent.TrackStreamStateChanged,\r\n  ParticipantEvent.TrackSubscriptionFailed,\r\n  ParticipantEvent.TrackSubscriptionPermissionChanged,\r\n  ParticipantEvent.TrackSubscriptionStatusChanged,\r\n];\r\n\r\nexport const allParticipantEvents = [\r\n  ...allRemoteParticipantEvents,\r\n  ParticipantEvent.LocalTrackPublished,\r\n  ParticipantEvent.LocalTrackUnpublished,\r\n];\r\n","import loglevel from 'loglevel';\r\n\r\nconst log = loglevel.getLogger('lk-components-js');\r\nlog.setDefaultLevel('WARN');\r\n\r\nexport default log;\r\n","import log from '../logger';\r\n\r\nexport type GridLayout = {\r\n  name: string;\r\n  columns: number;\r\n  rows: number;\r\n  // # Constraints that have to be meet to use this layout.\r\n  // ## 1. Participant range:\r\n  /** Minimum number of tiles needed to use this layout. */\r\n  minTiles: number;\r\n  /** Maximum tiles that fit into this layout. */\r\n  maxTiles: number;\r\n  // ## 2. Screen size limits:\r\n  /** Minimum width required to use this layout. */\r\n  minWidth: number;\r\n  /** Minimum height required to use this layout. */\r\n  minHeight: number;\r\n};\r\n\r\nexport const GRID_LAYOUTS: GridLayout[] = [\r\n  {\r\n    columns: 1,\r\n    rows: 1,\r\n    name: '1x1',\r\n    minTiles: 1,\r\n    maxTiles: 1,\r\n    minWidth: 0,\r\n    minHeight: 0,\r\n  },\r\n  {\r\n    columns: 1,\r\n    rows: 2,\r\n    name: '1x2',\r\n    minTiles: 2,\r\n    maxTiles: 2,\r\n    minWidth: 0,\r\n    minHeight: 0,\r\n  },\r\n  {\r\n    columns: 2,\r\n    rows: 1,\r\n    name: '2x1',\r\n    minTiles: 2,\r\n    maxTiles: 2,\r\n    minWidth: 800,\r\n    minHeight: 0,\r\n  },\r\n  {\r\n    columns: 2,\r\n    rows: 2,\r\n    name: '2x2',\r\n    minTiles: 3,\r\n    maxTiles: 4,\r\n    minWidth: 560,\r\n    minHeight: 0,\r\n  },\r\n  {\r\n    columns: 3,\r\n    rows: 3,\r\n    name: '3x3',\r\n    minTiles: 5,\r\n    maxTiles: 9,\r\n    minWidth: 700,\r\n    minHeight: 0,\r\n  },\r\n  {\r\n    columns: 4,\r\n    rows: 4,\r\n    name: '4x4',\r\n    minTiles: 10,\r\n    maxTiles: 16,\r\n    minWidth: 960,\r\n    minHeight: 0,\r\n  },\r\n  {\r\n    columns: 5,\r\n    rows: 5,\r\n    name: '5x5',\r\n    minTiles: 17,\r\n    maxTiles: 25,\r\n    minWidth: 1100,\r\n    minHeight: 0,\r\n  },\r\n];\r\n\r\nexport function selectGridLayout(\r\n  layouts: GridLayout[],\r\n  participantCount: number,\r\n  width: number,\r\n  height: number,\r\n): GridLayout {\r\n  // Find the best layout to fit all participants.\r\n  let currentLayoutIndex = 0;\r\n  let layout = layouts.find((layout_, index, allLayouts) => {\r\n    currentLayoutIndex = index;\r\n    const isBiggerLayoutAvailable =\r\n      allLayouts.findIndex((l, i) => {\r\n        const layoutIsBiggerThanCurrent = i > index;\r\n        const layoutFitsSameAmountOfParticipants = l.maxTiles === layout_.maxTiles;\r\n        return layoutIsBiggerThanCurrent && layoutFitsSameAmountOfParticipants;\r\n      }) !== -1;\r\n    return layout_.maxTiles >= participantCount && !isBiggerLayoutAvailable;\r\n  });\r\n  if (layout === undefined) {\r\n    layout = layouts[layouts.length - 1];\r\n    if (layout) {\r\n      log.warn(\r\n        `No layout found for: participantCount: ${participantCount}, width/height: ${width}/${height} fallback to biggest available layout (${layout.name}).`,\r\n      );\r\n    } else {\r\n      throw new Error(`No layout or fallback layout found.`);\r\n    }\r\n  }\r\n\r\n  // Check if the layout fits into the screen constraints. If not, recursively check the next smaller layout.\r\n  if (width < layout.minWidth || height < layout.minHeight) {\r\n    // const currentLayoutIndex = layouts.indexOf(layout);\r\n    if (currentLayoutIndex > 0) {\r\n      const smallerLayout = layouts[currentLayoutIndex - 1];\r\n      layout = selectGridLayout(\r\n        layouts.slice(0, currentLayoutIndex),\r\n        smallerLayout.maxTiles,\r\n        width,\r\n        height,\r\n      );\r\n    }\r\n  }\r\n  return layout;\r\n}\r\n","export function setDifference<T>(setA: Set<T>, setB: Set<T>): Set<T> {\r\n  const _difference = new Set(setA);\r\n  for (const elem of setB) {\r\n    _difference.delete(elem);\r\n  }\r\n  return _difference;\r\n}\r\n","import type { Participant, Track, TrackPublication } from 'livekit-client';\r\nimport type { TrackReference, TrackReferenceOrPlaceholder } from './track-reference';\r\n\r\n// ## PinState Type\r\nexport type PinState = TrackReferenceOrPlaceholder[];\r\nexport const PIN_DEFAULT_STATE: PinState = [];\r\n\r\n// ## WidgetState Types\r\nexport type WidgetState = {\r\n  showChat: string | null;\r\n};\r\n\r\nexport const WIDGET_DEFAULT_STATE: WidgetState = {\r\n  showChat: null,\r\n};\r\n\r\n// ## Track Source Types\r\nexport type TrackSourceWithOptions = { source: Track.Source; withPlaceholder: boolean };\r\n\r\nexport type SourcesArray = Track.Source[] | TrackSourceWithOptions[];\r\n\r\n// ### Track Source Type Predicates\r\nexport function isSourceWitOptions(source: SourcesArray[number]): source is TrackSourceWithOptions {\r\n  return typeof source === 'object';\r\n}\r\n\r\nexport function isSourcesWithOptions(sources: SourcesArray): sources is TrackSourceWithOptions[] {\r\n  return (\r\n    Array.isArray(sources) &&\r\n    (sources as TrackSourceWithOptions[]).filter(isSourceWitOptions).length > 0\r\n  );\r\n}\r\n\r\n// ## Loop Filter Types\r\nexport type TrackReferenceFilter = Parameters<TrackReferenceOrPlaceholder[]['filter']>['0'];\r\nexport type ParticipantFilter = Parameters<Participant[]['filter']>['0'];\r\n\r\n// ## Other Types\r\nexport interface ParticipantClickEvent {\r\n  participant: Participant;\r\n  track?: TrackPublication;\r\n}\r\n\r\nexport type TrackSource<T extends Track.Source> = RequireAtLeastOne<\r\n  { source: T; name: string; participant: Participant },\r\n  'name' | 'source'\r\n>;\r\n\r\n/**\r\n * The TrackIdentifier type is used to select Tracks either based on\r\n * - Track.Source and/or name of the track, e.g. `{source: Track.Source.Camera}` or `{name: \"my-track\"}`\r\n * - TrackReference (participant and publication)\r\n */\r\nexport type TrackIdentifier<T extends Track.Source = Track.Source> =\r\n  | TrackSource<T>\r\n  | TrackReference;\r\n\r\n// ## Util Types\r\ntype RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\r\n  {\r\n    [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;\r\n  }[Keys];\r\n\r\nexport type RequireOnlyOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\r\n  {\r\n    [K in Keys]-?: Required<Pick<T, K>> & Partial<Record<Exclude<Keys, K>, undefined>>;\r\n  }[Keys];\r\n\r\nexport type AudioSource = Track.Source.Microphone | Track.Source.ScreenShareAudio;\r\nexport type VideoSource = Track.Source.Camera | Track.Source.ScreenShare;\r\n","import { Track } from 'livekit-client';\r\nimport type { TrackReferenceOrPlaceholder } from '../track-reference';\r\nimport { isTrackReference } from '../track-reference';\r\nimport {\r\n  sortParticipantsByAudioLevel,\r\n  sortParticipantsByIsSpeaking,\r\n  sortParticipantsByJoinedAt,\r\n  sortParticipantsByLastSpokenAT,\r\n  sortTrackReferencesByType,\r\n  sortTrackRefsByIsCameraEnabled,\r\n} from './base-sort-functions';\r\n\r\n/**\r\n * Default sort for `TrackReferenceOrPlaceholder`, it'll order participants by:\r\n * 1. local camera track (publication.isLocal)\r\n * 2. remote screen_share track\r\n * 3. local screen_share track\r\n * 4. remote dominant speaker camera track (sorted by speaker with the loudest audio level)\r\n * 5. other remote speakers that are recently active\r\n * 6. remote unmuted camera tracks\r\n * 7. remote tracks sorted by joinedAt\r\n */\r\nexport function sortTrackReferences(\r\n  tracks: TrackReferenceOrPlaceholder[],\r\n): TrackReferenceOrPlaceholder[] {\r\n  const localTracks: TrackReferenceOrPlaceholder[] = [];\r\n  const screenShareTracks: TrackReferenceOrPlaceholder[] = [];\r\n  const cameraTracks: TrackReferenceOrPlaceholder[] = [];\r\n  const undefinedTracks: TrackReferenceOrPlaceholder[] = [];\r\n\r\n  tracks.forEach((trackRef) => {\r\n    if (trackRef.participant.isLocal && trackRef.source === Track.Source.Camera) {\r\n      localTracks.push(trackRef);\r\n    } else if (trackRef.source === Track.Source.ScreenShare) {\r\n      screenShareTracks.push(trackRef);\r\n    } else if (trackRef.source === Track.Source.Camera) {\r\n      cameraTracks.push(trackRef);\r\n    } else {\r\n      undefinedTracks.push(trackRef);\r\n    }\r\n  });\r\n\r\n  const sortedScreenShareTracks = sortScreenShareTracks(screenShareTracks);\r\n  const sortedCameraTracks = sortCameraTracks(cameraTracks);\r\n\r\n  return [...localTracks, ...sortedScreenShareTracks, ...sortedCameraTracks, ...undefinedTracks];\r\n}\r\n\r\n/**\r\n * Sort an array of `TrackReference` screen shares.\r\n * Main sorting order:\r\n * 1. remote screen shares\r\n * 2. local screen shares\r\n * Secondary sorting by participant's joining time.\r\n */\r\nfunction sortScreenShareTracks(\r\n  screenShareTracks: TrackReferenceOrPlaceholder[],\r\n): TrackReferenceOrPlaceholder[] {\r\n  const localScreenShares: TrackReferenceOrPlaceholder[] = [];\r\n  const remoteScreenShares: TrackReferenceOrPlaceholder[] = [];\r\n\r\n  screenShareTracks.forEach((trackRef) => {\r\n    if (trackRef.participant.isLocal) {\r\n      localScreenShares.push(trackRef);\r\n    } else {\r\n      remoteScreenShares.push(trackRef);\r\n    }\r\n  });\r\n\r\n  localScreenShares.sort((a, b) => sortParticipantsByJoinedAt(a.participant, b.participant));\r\n  remoteScreenShares.sort((a, b) => sortParticipantsByJoinedAt(a.participant, b.participant));\r\n\r\n  const sortedScreenShareTrackRefs = [...remoteScreenShares, ...localScreenShares];\r\n  return sortedScreenShareTrackRefs;\r\n}\r\n\r\nfunction sortCameraTracks(\r\n  cameraTrackReferences: TrackReferenceOrPlaceholder[],\r\n): TrackReferenceOrPlaceholder[] {\r\n  const localCameraTracks: TrackReferenceOrPlaceholder[] = [];\r\n  const remoteCameraTracks: TrackReferenceOrPlaceholder[] = [];\r\n\r\n  cameraTrackReferences.forEach((trackRef) => {\r\n    if (trackRef.participant.isLocal) {\r\n      localCameraTracks.push(trackRef);\r\n    } else {\r\n      remoteCameraTracks.push(trackRef);\r\n    }\r\n  });\r\n\r\n  remoteCameraTracks.sort((a, b) => {\r\n    // Participant with higher audio level goes first.\r\n    if (a.participant.isSpeaking && b.participant.isSpeaking) {\r\n      return sortParticipantsByAudioLevel(a.participant, b.participant);\r\n    }\r\n\r\n    // A speaking participant goes before one that is not speaking.\r\n    if (a.participant.isSpeaking !== b.participant.isSpeaking) {\r\n      return sortParticipantsByIsSpeaking(a.participant, b.participant);\r\n    }\r\n\r\n    // A participant that spoke recently goes before a participant that spoke a while back.\r\n    if (a.participant.lastSpokeAt !== b.participant.lastSpokeAt) {\r\n      return sortParticipantsByLastSpokenAT(a.participant, b.participant);\r\n    }\r\n\r\n    // TrackReference before TrackReferencePlaceholder\r\n    if (isTrackReference(a) !== isTrackReference(b)) {\r\n      return sortTrackReferencesByType(a, b);\r\n    }\r\n\r\n    // Tiles with video on before tiles with muted video track.\r\n    if (a.participant.isCameraEnabled !== b.participant.isCameraEnabled) {\r\n      return sortTrackRefsByIsCameraEnabled(a, b);\r\n    }\r\n\r\n    // A participant that joined a long time ago goes before one that joined recently.\r\n    return sortParticipantsByJoinedAt(a.participant, b.participant);\r\n  });\r\n\r\n  return [...localCameraTracks, ...remoteCameraTracks];\r\n}\r\n","/**\r\n * The TrackReference type is a logical grouping of participant publication and/or subscribed track.\r\n *\r\n */\r\n\r\nimport type { Participant, Track, TrackPublication } from 'livekit-client';\r\n// ## TrackReference Types\r\n\r\nexport type TrackReferencePlaceholder = {\r\n  participant: Participant;\r\n  publication?: never;\r\n  source: Track.Source;\r\n};\r\n\r\nexport type TrackReference = {\r\n  participant: Participant;\r\n  publication: TrackPublication;\r\n  source: Track.Source;\r\n};\r\n\r\nexport type TrackReferenceOrPlaceholder = TrackReference | TrackReferencePlaceholder;\r\n\r\n// ### TrackReference Type Predicates\r\nexport function isTrackReference(trackReference: unknown): trackReference is TrackReference {\r\n  if (typeof trackReference === 'undefined') {\r\n    return false;\r\n  }\r\n  return (\r\n    isTrackReferenceSubscribed(trackReference as TrackReference) ||\r\n    isTrackReferencePublished(trackReference as TrackReference)\r\n  );\r\n}\r\n\r\nfunction isTrackReferenceSubscribed(trackReference?: TrackReferenceOrPlaceholder): boolean {\r\n  if (!trackReference) {\r\n    return false;\r\n  }\r\n  return (\r\n    trackReference.hasOwnProperty('participant') &&\r\n    trackReference.hasOwnProperty('source') &&\r\n    trackReference.hasOwnProperty('track') &&\r\n    typeof trackReference.publication?.track !== 'undefined'\r\n  );\r\n}\r\n\r\nfunction isTrackReferencePublished(trackReference?: TrackReferenceOrPlaceholder): boolean {\r\n  if (!trackReference) {\r\n    return false;\r\n  }\r\n  return (\r\n    trackReference.hasOwnProperty('participant') &&\r\n    trackReference.hasOwnProperty('source') &&\r\n    trackReference.hasOwnProperty('publication') &&\r\n    typeof trackReference.publication !== 'undefined'\r\n  );\r\n}\r\n\r\nexport function isTrackReferencePlaceholder(\r\n  trackReference?: TrackReferenceOrPlaceholder,\r\n): trackReference is TrackReferencePlaceholder {\r\n  if (!trackReference) {\r\n    return false;\r\n  }\r\n  return (\r\n    trackReference.hasOwnProperty('participant') &&\r\n    trackReference.hasOwnProperty('source') &&\r\n    typeof trackReference.publication === 'undefined'\r\n  );\r\n}\r\n","import type { Track } from 'livekit-client';\r\nimport type { PinState } from '../types';\r\nimport type { TrackReferenceOrPlaceholder } from './track-reference.types';\r\nimport { isTrackReference, isTrackReferencePlaceholder } from './track-reference.types';\r\n\r\n/** Returns a id to identify the `TrackReference` based on participant and source. */\r\nexport function getTrackReferenceId(trackReference: TrackReferenceOrPlaceholder | number): string {\r\n  if (typeof trackReference === 'string' || typeof trackReference === 'number') {\r\n    return `${trackReference}`;\r\n  } else if (isTrackReference(trackReference)) {\r\n    return `${trackReference.participant.identity}_${trackReference.publication.source}`;\r\n  } else {\r\n    return `${trackReference.participant.identity}_${trackReference.source}`;\r\n  }\r\n}\r\n\r\n/** Returns the Source of the TrackReference. */\r\nexport function getTrackReferenceSource(trackReference: TrackReferenceOrPlaceholder): Track.Source {\r\n  if (isTrackReference(trackReference)) {\r\n    return trackReference.publication.source;\r\n  } else {\r\n    return trackReference.source;\r\n  }\r\n}\r\n\r\nexport function isEqualTrackRef(\r\n  a?: TrackReferenceOrPlaceholder,\r\n  b?: TrackReferenceOrPlaceholder,\r\n): boolean {\r\n  if (isTrackReference(a) && isTrackReference(b)) {\r\n    return a.publication.trackSid === b.publication.trackSid;\r\n  } else if (isTrackReferencePlaceholder(a) && isTrackReferencePlaceholder(b)) {\r\n    return a.participant.identity === b.participant.identity && a.source === b.source;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Check if the `TrackReference` is pinned.\r\n */\r\nexport function isTrackReferencePinned(\r\n  trackReference: TrackReferenceOrPlaceholder,\r\n  pinState: PinState | undefined,\r\n): boolean {\r\n  if (typeof pinState === 'undefined') {\r\n    return false;\r\n  }\r\n  if (isTrackReference(trackReference)) {\r\n    return pinState.some(\r\n      (pinnedTrackReference) =>\r\n        pinnedTrackReference.participant.identity === trackReference.participant.identity &&\r\n        isTrackReference(pinnedTrackReference) &&\r\n        pinnedTrackReference.publication.trackSid === trackReference.publication.trackSid,\r\n    );\r\n  } else if (isTrackReferencePlaceholder(trackReference)) {\r\n    return pinState.some(\r\n      (pinnedTrackReference) =>\r\n        pinnedTrackReference.participant.identity === trackReference.participant.identity &&\r\n        isTrackReferencePlaceholder(pinnedTrackReference) &&\r\n        pinnedTrackReference.source === trackReference.source,\r\n    );\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n","import type { Participant } from 'livekit-client';\r\nimport { Track } from 'livekit-client';\r\nimport type { TrackReferenceOrPlaceholder } from '../track-reference';\r\nimport { getTrackReferenceSource, isTrackReference } from '../track-reference';\r\n\r\nexport function sortParticipantsByAudioLevel(\r\n  a: Pick<Participant, 'audioLevel'>,\r\n  b: Pick<Participant, 'audioLevel'>,\r\n): number {\r\n  return b.audioLevel - a.audioLevel;\r\n}\r\n\r\nexport function sortParticipantsByIsSpeaking(\r\n  a: Pick<Participant, 'isSpeaking'>,\r\n  b: Pick<Participant, 'isSpeaking'>,\r\n): number {\r\n  if (a.isSpeaking === b.isSpeaking) {\r\n    return 0;\r\n  } else {\r\n    return a.isSpeaking ? -1 : 1;\r\n  }\r\n}\r\n\r\nexport function sortParticipantsByLastSpokenAT(\r\n  a: Pick<Participant, 'lastSpokeAt'>,\r\n  b: Pick<Participant, 'lastSpokeAt'>,\r\n): number {\r\n  if (a.lastSpokeAt !== undefined || b.lastSpokeAt !== undefined) {\r\n    return (b.lastSpokeAt?.getTime() ?? 0) - (a.lastSpokeAt?.getTime() ?? 0);\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport function sortParticipantsByJoinedAt(\r\n  a: Pick<Participant, 'joinedAt'>,\r\n  b: Pick<Participant, 'joinedAt'>,\r\n) {\r\n  return (a.joinedAt?.getTime() ?? 0) - (b.joinedAt?.getTime() ?? 0);\r\n}\r\n\r\nexport function sortTrackReferencesByType(\r\n  a: TrackReferenceOrPlaceholder,\r\n  b: TrackReferenceOrPlaceholder,\r\n) {\r\n  if (isTrackReference(a)) {\r\n    if (isTrackReference(b)) {\r\n      return 0;\r\n    } else {\r\n      return -1;\r\n    }\r\n  } else if (isTrackReference(b)) {\r\n    return 1;\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n\r\n/** TrackReference with screen share source goes first. */\r\nexport function sortTrackReferencesByScreenShare(\r\n  a: TrackReferenceOrPlaceholder,\r\n  b: TrackReferenceOrPlaceholder,\r\n): number {\r\n  const sourceA = getTrackReferenceSource(a);\r\n  const sourceB = getTrackReferenceSource(b);\r\n\r\n  if (sourceA === sourceB) {\r\n    if (sourceA === Track.Source.ScreenShare) {\r\n      if (a.participant.isLocal === b.participant.isLocal) {\r\n        return 0;\r\n      } else {\r\n        return a.participant.isLocal ? 1 : -1;\r\n      }\r\n    }\r\n    return 0;\r\n  } else if (sourceA === Track.Source.ScreenShare) {\r\n    return -1;\r\n  } else if (sourceB === Track.Source.ScreenShare) {\r\n    return 1;\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport function sortTrackRefsByIsCameraEnabled(\r\n  a: { participant: { isCameraEnabled: boolean } },\r\n  b: { participant: { isCameraEnabled: boolean } },\r\n) {\r\n  const aVideo = a.participant.isCameraEnabled;\r\n  const bVideo = b.participant.isCameraEnabled;\r\n\r\n  if (aVideo !== bVideo) {\r\n    if (aVideo) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n","import type { Participant } from 'livekit-client';\r\nimport { LocalParticipant } from 'livekit-client';\r\nimport {\r\n  sortParticipantsByAudioLevel,\r\n  sortParticipantsByIsSpeaking,\r\n  sortParticipantsByJoinedAt,\r\n  sortParticipantsByLastSpokenAT,\r\n} from './base-sort-functions';\r\n\r\n/**\r\n * Default sort for participants, it'll order participants by:\r\n * 1. local participant\r\n * 2. dominant speaker (speaker with the loudest audio level)\r\n * 3. other speakers that are recently active\r\n * 4. participants with video on\r\n * 5. by joinedAt\r\n */\r\nexport function sortParticipants(participants: Participant[]): Participant[] {\r\n  const sortedParticipants = [...participants];\r\n  sortedParticipants.sort((a, b) => {\r\n    // loudest speaker first\r\n    if (a.isSpeaking && b.isSpeaking) {\r\n      return sortParticipantsByAudioLevel(a, b);\r\n    }\r\n\r\n    // speaker goes first\r\n    if (a.isSpeaking !== b.isSpeaking) {\r\n      return sortParticipantsByIsSpeaking(a, b);\r\n    }\r\n\r\n    // last active speaker first\r\n    if (a.lastSpokeAt !== b.lastSpokeAt) {\r\n      return sortParticipantsByLastSpokenAT(a, b);\r\n    }\r\n\r\n    // video on\r\n    const aVideo = a.videoTracks.size > 0;\r\n    const bVideo = b.videoTracks.size > 0;\r\n    if (aVideo !== bVideo) {\r\n      if (aVideo) {\r\n        return -1;\r\n      } else {\r\n        return 1;\r\n      }\r\n    }\r\n\r\n    // joinedAt\r\n    return sortParticipantsByJoinedAt(a, b);\r\n  });\r\n  const localParticipant = sortedParticipants.find((p) => p instanceof LocalParticipant);\r\n  if (localParticipant) {\r\n    const localIdx = sortedParticipants.indexOf(localParticipant);\r\n    if (localIdx >= 0) {\r\n      sortedParticipants.splice(localIdx, 1);\r\n      if (sortedParticipants.length > 0) {\r\n        sortedParticipants.splice(0, 0, localParticipant);\r\n      } else {\r\n        sortedParticipants.push(localParticipant);\r\n      }\r\n    }\r\n  }\r\n  return sortedParticipants;\r\n}\r\n","export function chunk<T>(input: Array<T>, size: number) {\r\n  return input.reduce((arr, item, idx) => {\r\n    return idx % size === 0 ? [...arr, [item]] : [...arr.slice(0, -1), [...arr.slice(-1)[0], item]];\r\n  }, [] as Array<Array<T>>);\r\n}\r\n\r\nexport function zip<T, U>(a1: Array<T>, a2: Array<U>) {\r\n  const resultLength = Math.max(a1.length, a2.length);\r\n  return new Array(resultLength).fill([]).map((_val, idx) => [a1[idx], a2[idx]]);\r\n}\r\n\r\nexport function differenceBy<T>(a1: Array<T>, a2: Array<T>, by: (arg: T) => string) {\r\n  return a1.filter((c) => !a2.map((v) => by(v)).includes(by(c)));\r\n}\r\n","/**\r\n * Internal test function.\r\n *\r\n * @internal\r\n */\r\n\r\nimport { Participant, Track, TrackPublication } from 'livekit-client';\r\nimport type { UpdatableItem } from '../sorting/tile-array-update';\r\nimport type { TrackReference, TrackReferencePlaceholder } from './track-reference.types';\r\nimport { getTrackReferenceId } from './track-reference.utils';\r\n\r\n// Test function:\r\nexport const mockTrackReferencePlaceholder = (\r\n  id: string,\r\n  source: Track.Source,\r\n): TrackReferencePlaceholder => {\r\n  return { participant: new Participant(`${id}`, `${id}`), source };\r\n};\r\n\r\nexport const mockTrackReferencePublished = (id: string, source: Track.Source): TrackReference => {\r\n  const kind = [Track.Source.Camera, Track.Source.ScreenShare].includes(source)\r\n    ? Track.Kind.Video\r\n    : Track.Kind.Audio;\r\n  return {\r\n    participant: new Participant(`${id}`, `${id}`),\r\n    publication: new TrackPublication(kind, `${id}`, `${id}`),\r\n    source: source,\r\n  };\r\n};\r\n\r\ntype mockTrackReferenceSubscribedOptions = {\r\n  mockPublication?: boolean;\r\n  mockParticipant?: boolean;\r\n  mockIsLocal?: boolean;\r\n};\r\n\r\nexport const mockTrackReferenceSubscribed = (\r\n  id: string,\r\n  source: Track.Source,\r\n  options: mockTrackReferenceSubscribedOptions = {},\r\n): TrackReference => {\r\n  const kind = [Track.Source.Camera, Track.Source.ScreenShare].includes(source)\r\n    ? Track.Kind.Video\r\n    : Track.Kind.Audio;\r\n\r\n  const publication = new TrackPublication(kind, `${id}`, `${id}`);\r\n  // @ts-expect-error\r\n  publication.track = {};\r\n  return {\r\n    participant: options.mockParticipant\r\n      ? (mockParticipant(id, options.mockIsLocal ?? false) as Participant)\r\n      : new Participant(`${id}`, `${id}`),\r\n    publication: options.mockPublication\r\n      ? (mockTrackPublication(id, kind, source) as TrackPublication)\r\n      : publication,\r\n    source,\r\n  };\r\n};\r\n\r\nconst mockTrackPublication = (\r\n  id: string,\r\n  kind: Track.Kind,\r\n  source: Track.Source,\r\n): Pick<TrackPublication, 'kind' | 'trackSid' | 'trackName' | 'source'> => {\r\n  return {\r\n    kind,\r\n    trackSid: id,\r\n    trackName: `name_${id}`,\r\n    source: source,\r\n  };\r\n};\r\n\r\nfunction mockParticipant(\r\n  id: string,\r\n  isLocal: boolean,\r\n): Pick<Participant, 'sid' | 'identity' | 'isLocal'> {\r\n  return {\r\n    sid: `${id}_sid`,\r\n    identity: `${id}`,\r\n    isLocal: isLocal,\r\n  };\r\n}\r\n\r\nexport function flatTrackReferenceArray<T extends UpdatableItem>(list: T[]): string[] {\r\n  return list.map((item) => {\r\n    if (typeof item === 'string' || typeof item === 'number') {\r\n      return `${item}`;\r\n    } else {\r\n      return getTrackReferenceId(item);\r\n    }\r\n  });\r\n}\r\n","import { differenceBy, chunk, zip } from '../helper/array-helper';\r\nimport log from '../logger';\r\nimport type { TrackReferenceOrPlaceholder } from '../track-reference';\r\nimport { getTrackReferenceId } from '../track-reference';\r\nimport { flatTrackReferenceArray } from '../track-reference/test-utils';\r\n\r\ntype VisualChanges<T> = {\r\n  dropped: T[];\r\n  added: T[];\r\n};\r\n\r\nexport type UpdatableItem = TrackReferenceOrPlaceholder | number;\r\n\r\n/** Check if something visually change on the page. */\r\nexport function visualPageChange<T extends UpdatableItem>(state: T[], next: T[]): VisualChanges<T> {\r\n  return {\r\n    dropped: differenceBy(state, next, getTrackReferenceId),\r\n    added: differenceBy(next, state, getTrackReferenceId),\r\n  };\r\n}\r\n\r\nfunction listNeedsUpdating<T>(changes: VisualChanges<T>): boolean {\r\n  return changes.added.length !== 0 || changes.dropped.length !== 0;\r\n}\r\n\r\nexport function findIndex<T extends UpdatableItem>(\r\n  trackReference: T,\r\n  trackReferences: T[],\r\n): number {\r\n  const indexToReplace = trackReferences.findIndex(\r\n    (trackReference_) =>\r\n      getTrackReferenceId(trackReference_) === getTrackReferenceId(trackReference),\r\n  );\r\n  if (indexToReplace === -1) {\r\n    throw new Error(\r\n      `Element not part of the array: ${getTrackReferenceId(\r\n        trackReference,\r\n      )} not in ${flatTrackReferenceArray(trackReferences)}`,\r\n    );\r\n  }\r\n  return indexToReplace;\r\n}\r\n\r\n/** Swap items in the complete list of all elements */\r\nexport function swapItems<T extends UpdatableItem>(\r\n  moveForward: T,\r\n  moveBack: T,\r\n  trackReferences: T[],\r\n): T[] {\r\n  const indexToReplace = findIndex(moveForward, trackReferences);\r\n  const indexReplaceWith = findIndex(moveBack, trackReferences);\r\n\r\n  trackReferences.splice(indexToReplace, 1, moveBack);\r\n  trackReferences.splice(indexReplaceWith, 1, moveForward);\r\n\r\n  return trackReferences;\r\n}\r\n\r\nexport function dropItem<T extends UpdatableItem>(itemToDrop: T, list: T[]): T[] {\r\n  const indexOfElementToDrop = findIndex(itemToDrop, list);\r\n  // const indexOfElementToDrop = list.findIndex((item) => item === itemToDrop, list);\r\n  list.splice(indexOfElementToDrop, 1);\r\n  return list;\r\n}\r\n\r\nfunction addItem<T extends UpdatableItem>(itemToAdd: T, list: T[]): T[] {\r\n  return [...list, itemToAdd];\r\n}\r\n\r\nexport function divideIntoPages<T>(list: T[], maxElementsOnPage: number): Array<T[]> {\r\n  const pages = chunk(list, maxElementsOnPage);\r\n  return pages;\r\n}\r\n\r\n/** Divide the list of elements into pages and and check if pages need updating. */\r\nexport function updatePages<T extends UpdatableItem>(\r\n  currentList: T[],\r\n  nextList: T[],\r\n  maxItemsOnPage: number,\r\n): T[] {\r\n  let updatedList: T[] = [...currentList];\r\n\r\n  if (currentList.length < nextList.length) {\r\n    // Items got added: Find newly added items and add them to the end of the list.\r\n    const addedItems = differenceBy(nextList, currentList, getTrackReferenceId);\r\n    updatedList = [...updatedList, ...addedItems];\r\n  }\r\n  const currentPages = divideIntoPages(currentList, maxItemsOnPage);\r\n  const nextPages = divideIntoPages(nextList, maxItemsOnPage);\r\n\r\n  zip(currentPages, nextPages).forEach(([currentPage, nextPage], pageIndex) => {\r\n    if (currentPage && nextPage) {\r\n      // 1) Identify  missing tile.\r\n      const updatedPage = divideIntoPages(updatedList, maxItemsOnPage)[pageIndex];\r\n      const changes = visualPageChange(updatedPage, nextPage);\r\n\r\n      if (listNeedsUpdating(changes)) {\r\n        log.debug(\r\n          `Detected visual changes on page: ${pageIndex}, current: ${flatTrackReferenceArray(\r\n            currentPage,\r\n          )}, next: ${flatTrackReferenceArray(nextPage)}`,\r\n          { changes },\r\n        );\r\n        // ## Swap Items\r\n        if (changes.added.length === changes.dropped.length) {\r\n          zip(changes.added, changes.dropped).forEach(([added, dropped]) => {\r\n            if (added && dropped) {\r\n              updatedList = swapItems<T>(added, dropped, updatedList);\r\n            } else {\r\n              throw new Error(\r\n                `For a swap action we need a addition and a removal one is missing: ${added}, ${dropped}`,\r\n              );\r\n            }\r\n          });\r\n        }\r\n        // ## Handle Drop Items\r\n        if (changes.added.length === 0 && changes.dropped.length > 0) {\r\n          changes.dropped.forEach((item) => {\r\n            updatedList = dropItem<T>(item, updatedList);\r\n          });\r\n        }\r\n        // ## Handle Item added\r\n        if (changes.added.length > 0 && changes.dropped.length === 0) {\r\n          changes.added.forEach((item) => {\r\n            updatedList = addItem<T>(item, updatedList);\r\n          });\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  if (updatedList.length > nextList.length) {\r\n    // Items got removed: Find items that got completely removed from the list.\r\n    const missingItems = differenceBy(currentList, nextList, getTrackReferenceId);\r\n    updatedList = updatedList.filter(\r\n      (item) => !missingItems.map(getTrackReferenceId).includes(getTrackReferenceId(item)),\r\n    );\r\n  }\r\n\r\n  return updatedList;\r\n}\r\n","import type {\r\n  AudioCaptureOptions,\r\n  LocalParticipant,\r\n  Room,\r\n  ScreenShareCaptureOptions,\r\n  VideoCaptureOptions,\r\n} from 'livekit-client';\r\nimport { Track } from 'livekit-client';\r\nimport type { Observable } from 'rxjs';\r\nimport { Subject, map, startWith } from 'rxjs';\r\nimport { observeParticipantMedia } from '../observables/participant';\r\nimport { prefixClass } from '../styles-interface';\r\n\r\nexport type CaptureOptionsBySource<T extends ToggleSource> = T extends Track.Source.Camera\r\n  ? VideoCaptureOptions\r\n  : T extends Track.Source.Microphone\r\n  ? AudioCaptureOptions\r\n  : T extends Track.Source.ScreenShare\r\n  ? ScreenShareCaptureOptions\r\n  : never;\r\n\r\nexport type MediaToggleType<T extends ToggleSource> = {\r\n  pendingObserver: Observable<boolean>;\r\n  toggle: (forceState?: boolean, captureOptions?: CaptureOptionsBySource<T>) => Promise<void>;\r\n  className: string;\r\n  enabledObserver: Observable<boolean>;\r\n};\r\n\r\nexport type ToggleSource = Exclude<\r\n  Track.Source,\r\n  Track.Source.ScreenShareAudio | Track.Source.Unknown\r\n>;\r\n\r\nexport function setupMediaToggle<T extends ToggleSource>(\r\n  source: T,\r\n  room: Room,\r\n  options?: CaptureOptionsBySource<T>,\r\n): MediaToggleType<T> {\r\n  const { localParticipant } = room;\r\n\r\n  const getSourceEnabled = (source: ToggleSource, localParticipant: LocalParticipant) => {\r\n    let isEnabled = false;\r\n    switch (source) {\r\n      case Track.Source.Camera:\r\n        isEnabled = localParticipant.isCameraEnabled;\r\n        break;\r\n      case Track.Source.Microphone:\r\n        isEnabled = localParticipant.isMicrophoneEnabled;\r\n        break;\r\n      case Track.Source.ScreenShare:\r\n        isEnabled = localParticipant.isScreenShareEnabled;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return isEnabled;\r\n  };\r\n\r\n  const enabledObserver = observeParticipantMedia(localParticipant).pipe(\r\n    map((media) => {\r\n      return getSourceEnabled(source, media.participant as LocalParticipant);\r\n    }),\r\n    startWith(getSourceEnabled(source, localParticipant)),\r\n  );\r\n\r\n  const pendingSubject = new Subject<boolean>();\r\n  const toggle = async (forceState?: boolean, captureOptions?: CaptureOptionsBySource<T>) => {\r\n    try {\r\n      captureOptions ??= options;\r\n      // trigger observable update\r\n      pendingSubject.next(true);\r\n      switch (source) {\r\n        case Track.Source.Camera:\r\n          await localParticipant.setCameraEnabled(\r\n            forceState ?? !localParticipant.isCameraEnabled,\r\n            captureOptions as VideoCaptureOptions,\r\n          );\r\n          break;\r\n        case Track.Source.Microphone:\r\n          await localParticipant.setMicrophoneEnabled(\r\n            forceState ?? !localParticipant.isMicrophoneEnabled,\r\n            captureOptions as AudioCaptureOptions,\r\n          );\r\n          break;\r\n        case Track.Source.ScreenShare:\r\n          await localParticipant.setScreenShareEnabled(\r\n            forceState ?? !localParticipant.isScreenShareEnabled,\r\n            captureOptions as ScreenShareCaptureOptions,\r\n          );\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } finally {\r\n      pendingSubject.next(false);\r\n      // trigger observable update\r\n    }\r\n  };\r\n\r\n  const className: string = prefixClass('button');\r\n  return {\r\n    className,\r\n    toggle,\r\n    enabledObserver,\r\n    pendingObserver: pendingSubject.asObservable(),\r\n  };\r\n}\r\n\r\nexport function setupManualToggle() {\r\n  let state = false;\r\n\r\n  const enabledSubject = new Subject<boolean>();\r\n\r\n  const pendingSubject = new Subject<boolean>();\r\n\r\n  const toggle = (forceState?: boolean) => {\r\n    pendingSubject.next(true);\r\n    state = forceState ?? !state;\r\n    enabledSubject.next(state);\r\n    pendingSubject.next(false);\r\n  };\r\n  const className: string = prefixClass('button');\r\n  return {\r\n    className,\r\n    toggle,\r\n    enabledObserver: enabledSubject.asObservable(),\r\n    pendingObserver: pendingSubject.asObservable(),\r\n  };\r\n}\r\n","import type { Participant, RemoteParticipant, Room, TrackPublication } from 'livekit-client';\r\nimport { ParticipantEvent, RoomEvent, Track } from 'livekit-client';\r\nimport type { Subscriber } from 'rxjs';\r\nimport { map, switchMap, Observable, startWith } from 'rxjs';\r\nimport { observeRoomEvents } from './room';\r\nimport type { ParticipantEventCallbacks } from 'livekit-client/dist/src/room/participant/Participant';\r\nimport { allParticipantEvents, allParticipantRoomEvents } from '../helper/eventGroups';\r\nimport type { TrackIdentifier } from '../types';\r\nimport { getTrackByIdentifier } from '../components/mediaTrack';\r\n\r\nexport function observeParticipantEvents<T extends Participant>(\r\n  participant: T,\r\n  ...events: ParticipantEvent[]\r\n) {\r\n  const observable = new Observable<T>((subscribe) => {\r\n    const onParticipantUpdate = () => {\r\n      subscribe.next(participant);\r\n    };\r\n\r\n    events.forEach((evt) => {\r\n      participant.on(evt, onParticipantUpdate);\r\n    });\r\n\r\n    const unsubscribe = () => {\r\n      events.forEach((evt) => {\r\n        participant.off(evt, onParticipantUpdate);\r\n      });\r\n    };\r\n    return unsubscribe;\r\n  }).pipe(startWith(participant));\r\n\r\n  return observable;\r\n}\r\n\r\nexport interface ParticipantMedia<T extends Participant = Participant> {\r\n  isCameraEnabled: boolean;\r\n  isMicrophoneEnabled: boolean;\r\n  isScreenShareEnabled: boolean;\r\n  microphoneTrack?: TrackPublication;\r\n  cameraTrack?: TrackPublication;\r\n  participant: T;\r\n}\r\n\r\nexport function observeParticipantMedia<T extends Participant>(participant: T) {\r\n  const participantObserver = observeParticipantEvents(\r\n    participant,\r\n    ParticipantEvent.TrackMuted,\r\n    ParticipantEvent.TrackUnmuted,\r\n    ParticipantEvent.ParticipantPermissionsChanged,\r\n    // ParticipantEvent.IsSpeakingChanged,\r\n    ParticipantEvent.TrackPublished,\r\n    ParticipantEvent.TrackUnpublished,\r\n    ParticipantEvent.TrackSubscribed,\r\n    ParticipantEvent.TrackUnsubscribed,\r\n    ParticipantEvent.LocalTrackPublished,\r\n    ParticipantEvent.LocalTrackUnpublished,\r\n    // ParticipantEvent.ConnectionQualityChanged,\r\n  ).pipe(\r\n    map((p) => {\r\n      const { isMicrophoneEnabled, isCameraEnabled, isScreenShareEnabled } = p;\r\n      const microphoneTrack = p.getTrack(Track.Source.Microphone);\r\n      const cameraTrack = p.getTrack(Track.Source.Camera);\r\n      const participantMedia: ParticipantMedia<T> = {\r\n        isCameraEnabled,\r\n        isMicrophoneEnabled,\r\n        isScreenShareEnabled,\r\n        cameraTrack,\r\n        microphoneTrack,\r\n        participant: p,\r\n      };\r\n      return participantMedia;\r\n    }),\r\n  );\r\n\r\n  return participantObserver;\r\n}\r\n\r\nexport function createTrackObserver(participant: Participant, options: TrackIdentifier) {\r\n  return observeParticipantMedia(participant).pipe(\r\n    map(() => {\r\n      return { publication: getTrackByIdentifier(options) };\r\n    }),\r\n  );\r\n}\r\n\r\nexport function participantInfoObserver(participant: Participant) {\r\n  const observer = observeParticipantEvents(\r\n    participant,\r\n    ParticipantEvent.ParticipantMetadataChanged,\r\n    // ParticipantEvent.LocalTrackPublished,\r\n  ).pipe(\r\n    map(({ name, identity, metadata }) => {\r\n      return {\r\n        name,\r\n        identity,\r\n        metadata,\r\n      };\r\n    }),\r\n    startWith({\r\n      name: participant.name,\r\n      identity: participant.identity,\r\n      metadata: participant.metadata,\r\n    }),\r\n  );\r\n  return observer;\r\n}\r\n\r\nexport function createConnectionQualityObserver(participant: Participant) {\r\n  const observer = participantEventSelector(\r\n    participant,\r\n    ParticipantEvent.ConnectionQualityChanged,\r\n  ).pipe(\r\n    map(([quality]) => quality),\r\n    startWith(participant.connectionQuality),\r\n  );\r\n  return observer;\r\n}\r\n\r\nexport function participantEventSelector<T extends ParticipantEvent>(\r\n  participant: Participant,\r\n  event: T,\r\n) {\r\n  const observable = new Observable<Parameters<ParticipantEventCallbacks[T]>>((subscribe) => {\r\n    type Callback = ParticipantEventCallbacks[T];\r\n    const update: Callback = (...params: Array<any>) => {\r\n      // @ts-ignore\r\n      subscribe.next(params);\r\n    };\r\n    participant.on(event, update);\r\n\r\n    const unsubscribe = () => {\r\n      participant.off(event, update);\r\n    };\r\n    return unsubscribe;\r\n  });\r\n\r\n  return observable;\r\n}\r\n\r\nexport function mutedObserver(participant: Participant, source: Track.Source) {\r\n  return observeParticipantEvents(\r\n    participant,\r\n    ParticipantEvent.TrackMuted,\r\n    ParticipantEvent.TrackUnmuted,\r\n    ParticipantEvent.TrackSubscribed,\r\n    ParticipantEvent.TrackUnsubscribed,\r\n    ParticipantEvent.LocalTrackPublished,\r\n    ParticipantEvent.LocalTrackUnpublished,\r\n  ).pipe(\r\n    map((participant) => {\r\n      const pub = participant.getTrack(source);\r\n      return pub?.isMuted ?? true;\r\n    }),\r\n    startWith(participant.getTrack(source)?.isMuted ?? true),\r\n  );\r\n}\r\n\r\nexport function createIsSpeakingObserver(participant: Participant) {\r\n  return participantEventSelector(participant, ParticipantEvent.IsSpeakingChanged).pipe(\r\n    map(([isSpeaking]) => isSpeaking),\r\n  );\r\n}\r\n\r\ntype ConnectedParticipantsObserverOptions = {\r\n  additionalRoomEvents?: RoomEvent[];\r\n};\r\n\r\nexport function connectedParticipantsObserver(\r\n  room: Room,\r\n  options: ConnectedParticipantsObserverOptions = {},\r\n) {\r\n  let subscriber: Subscriber<RemoteParticipant[]> | undefined;\r\n\r\n  const observable = new Observable<RemoteParticipant[]>((sub) => {\r\n    subscriber = sub;\r\n    return () => listener.unsubscribe();\r\n  }).pipe(startWith(Array.from(room.participants.values())));\r\n\r\n  const additionalRoomEvents = options.additionalRoomEvents ?? allParticipantRoomEvents;\r\n\r\n  const roomEvents = Array.from(\r\n    new Set([\r\n      RoomEvent.ParticipantConnected,\r\n      RoomEvent.ParticipantDisconnected,\r\n      RoomEvent.ConnectionStateChanged,\r\n      ...additionalRoomEvents,\r\n    ]),\r\n  );\r\n\r\n  const listener = observeRoomEvents(room, ...roomEvents).subscribe((r) =>\r\n    subscriber?.next(Array.from(r.participants.values())),\r\n  );\r\n  if (room.participants.size > 0) {\r\n    subscriber?.next(Array.from(room.participants.values()));\r\n  }\r\n  return observable;\r\n}\r\n\r\nexport type ConnectedParticipantObserverOptions = {\r\n  additionalEvents?: ParticipantEvent[];\r\n};\r\n\r\nexport function connectedParticipantObserver(\r\n  room: Room,\r\n  identity: string,\r\n  options: ConnectedParticipantObserverOptions = {},\r\n) {\r\n  const additionalEvents = options.additionalEvents ?? allParticipantEvents;\r\n  const observable = observeRoomEvents(\r\n    room,\r\n    RoomEvent.ParticipantConnected,\r\n    RoomEvent.ParticipantDisconnected,\r\n    RoomEvent.ConnectionStateChanged,\r\n  ).pipe(\r\n    switchMap((r) => {\r\n      const participant = r.getParticipantByIdentity(identity) as RemoteParticipant | undefined;\r\n      if (participant) {\r\n        return observeParticipantEvents(participant, ...additionalEvents);\r\n      } else {\r\n        return new Observable<undefined>((subscribe) => subscribe.next(undefined));\r\n      }\r\n    }),\r\n    startWith(room.getParticipantByIdentity(identity) as RemoteParticipant | undefined),\r\n  );\r\n\r\n  return observable;\r\n}\r\n\r\nexport function participantPermissionObserver(participant: Participant) {\r\n  const observer = participantEventSelector(\r\n    participant,\r\n    ParticipantEvent.ParticipantPermissionsChanged,\r\n  ).pipe(\r\n    map(() => participant.permissions),\r\n    startWith(participant.permissions),\r\n  );\r\n  return observer;\r\n}\r\n","import type { Subscriber, Subscription } from 'rxjs';\r\nimport { Subject, map, Observable, startWith, finalize } from 'rxjs';\r\nimport type { Participant, TrackPublication } from 'livekit-client';\r\nimport { Room, RoomEvent, Track } from 'livekit-client';\r\nimport type { RoomEventCallbacks } from 'livekit-client/dist/src/room/Room';\r\nexport function observeRoomEvents(room: Room, ...events: RoomEvent[]): Observable<Room> {\r\n  const observable = new Observable<Room>((subscribe) => {\r\n    const onRoomUpdate = () => {\r\n      subscribe.next(room);\r\n    };\r\n\r\n    events.forEach((evt) => {\r\n      room.on(evt, onRoomUpdate);\r\n    });\r\n\r\n    const unsubscribe = () => {\r\n      events.forEach((evt) => {\r\n        room.off(evt, onRoomUpdate);\r\n      });\r\n    };\r\n    return unsubscribe;\r\n  }).pipe(startWith(room));\r\n\r\n  return observable;\r\n}\r\n\r\nexport function roomEventSelector<T extends RoomEvent>(room: Room, event: T) {\r\n  const observable = new Observable<Parameters<RoomEventCallbacks[T]>>((subscribe) => {\r\n    type Callback = RoomEventCallbacks[T];\r\n    const update: Callback = (...params: Array<any>) => {\r\n      // @ts-ignore\r\n      subscribe.next(params);\r\n    };\r\n    room.on(event, update);\r\n\r\n    const unsubscribe = () => {\r\n      room.off(event, update);\r\n    };\r\n    return unsubscribe;\r\n  });\r\n\r\n  return observable;\r\n}\r\n\r\nexport function roomObserver(room: Room) {\r\n  const observable = observeRoomEvents(\r\n    room,\r\n    RoomEvent.ParticipantConnected,\r\n    RoomEvent.ParticipantDisconnected,\r\n    RoomEvent.ActiveSpeakersChanged,\r\n    RoomEvent.TrackSubscribed,\r\n    RoomEvent.TrackUnsubscribed,\r\n    RoomEvent.LocalTrackPublished,\r\n    RoomEvent.LocalTrackUnpublished,\r\n    RoomEvent.AudioPlaybackStatusChanged,\r\n    RoomEvent.ConnectionStateChanged,\r\n  ).pipe(startWith(room));\r\n\r\n  return observable;\r\n}\r\n\r\nexport function connectionStateObserver(room: Room) {\r\n  return roomEventSelector(room, RoomEvent.ConnectionStateChanged).pipe(\r\n    map(([connectionState]) => connectionState),\r\n    startWith(room.state),\r\n  );\r\n}\r\nexport type ScreenShareTrackMap = Array<{\r\n  participant: Participant;\r\n  tracks: Array<TrackPublication>;\r\n}>;\r\n\r\nexport function screenShareObserver(room: Room) {\r\n  let screenShareSubscriber: Subscriber<ScreenShareTrackMap>;\r\n  const observers: Array<Subscription> = [];\r\n\r\n  const observable = new Observable<ScreenShareTrackMap>((subscriber) => {\r\n    screenShareSubscriber = subscriber;\r\n    return () => {\r\n      observers.forEach((observer) => {\r\n        observer.unsubscribe();\r\n      });\r\n    };\r\n  });\r\n  const screenShareTracks: ScreenShareTrackMap = [];\r\n\r\n  const handleSub = (publication: TrackPublication, participant: Participant) => {\r\n    if (\r\n      publication.source !== Track.Source.ScreenShare &&\r\n      publication.source !== Track.Source.ScreenShareAudio\r\n    ) {\r\n      return;\r\n    }\r\n    let trackMap = screenShareTracks.find((tr) => tr.participant.identity === participant.identity);\r\n    const getScreenShareTracks = (participant: Participant) => {\r\n      return participant\r\n        .getTracks()\r\n        .filter(\r\n          (track) =>\r\n            (track.source === Track.Source.ScreenShare ||\r\n              track.source === Track.Source.ScreenShareAudio) &&\r\n            track.track,\r\n        );\r\n    };\r\n    if (!trackMap) {\r\n      trackMap = {\r\n        participant,\r\n        tracks: getScreenShareTracks(participant),\r\n      };\r\n    } else {\r\n      const index = screenShareTracks.indexOf(trackMap);\r\n      screenShareTracks.splice(index, 1);\r\n      trackMap.tracks = getScreenShareTracks(participant);\r\n    }\r\n    if (trackMap.tracks.length > 0) {\r\n      screenShareTracks.push(trackMap);\r\n    }\r\n\r\n    screenShareSubscriber.next(screenShareTracks);\r\n  };\r\n  observers.push(\r\n    roomEventSelector(room, RoomEvent.TrackSubscribed).subscribe(([, ...args]) =>\r\n      handleSub(...args),\r\n    ),\r\n  );\r\n  observers.push(\r\n    roomEventSelector(room, RoomEvent.TrackUnsubscribed).subscribe(([, ...args]) =>\r\n      handleSub(...args),\r\n    ),\r\n  );\r\n  observers.push(\r\n    roomEventSelector(room, RoomEvent.LocalTrackPublished).subscribe((args) => handleSub(...args)),\r\n  );\r\n  observers.push(\r\n    roomEventSelector(room, RoomEvent.LocalTrackUnpublished).subscribe((args) => {\r\n      handleSub(...args);\r\n    }),\r\n  );\r\n  observers.push(\r\n    roomEventSelector(room, RoomEvent.TrackMuted).subscribe((args) => {\r\n      handleSub(...args);\r\n    }),\r\n  );\r\n  observers.push(\r\n    roomEventSelector(room, RoomEvent.TrackUnmuted).subscribe((args) => {\r\n      handleSub(...args);\r\n    }),\r\n  );\r\n  setTimeout(() => {\r\n    // TODO find way to avoid this timeout\r\n    for (const p of room.participants.values()) {\r\n      p.getTracks().forEach((track) => {\r\n        handleSub(track, p);\r\n      });\r\n    }\r\n  }, 1);\r\n\r\n  return observable;\r\n}\r\n\r\nexport function roomInfoObserver(room: Room) {\r\n  const observer = observeRoomEvents(\r\n    room,\r\n    RoomEvent.RoomMetadataChanged,\r\n    RoomEvent.ConnectionStateChanged,\r\n  ).pipe(\r\n    map((r) => {\r\n      return { name: r.name, metadata: r.metadata };\r\n    }),\r\n  );\r\n  return observer;\r\n}\r\n\r\nexport function activeSpeakerObserver(room: Room) {\r\n  return roomEventSelector(room, RoomEvent.ActiveSpeakersChanged).pipe(\r\n    map(([speakers]) => speakers),\r\n  );\r\n}\r\n\r\nexport function createMediaDeviceObserver(kind?: MediaDeviceKind, requestPermissions = true) {\r\n  const onDeviceChange = async () => {\r\n    const newDevices = await Room.getLocalDevices(kind, requestPermissions);\r\n    deviceSubject.next(newDevices);\r\n  };\r\n  const deviceSubject = new Subject<MediaDeviceInfo[]>();\r\n\r\n  const observable = deviceSubject.pipe(\r\n    finalize(() => {\r\n      navigator?.mediaDevices?.removeEventListener('devicechange', onDeviceChange);\r\n    }),\r\n  );\r\n\r\n  if (typeof window !== 'undefined') {\r\n    if (!window.isSecureContext) {\r\n      throw new Error(\r\n        `Accessing media devices is available only in secure contexts (HTTPS and localhost), in some or all supporting browsers. See: https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaDevices`,\r\n      );\r\n    }\r\n    navigator?.mediaDevices?.addEventListener('devicechange', onDeviceChange);\r\n    // because we rely on an async function, trigger the first update instead of using startWith\r\n    onDeviceChange();\r\n  }\r\n  return observable;\r\n}\r\n\r\nexport function createDataObserver(room: Room) {\r\n  return roomEventSelector(room, RoomEvent.DataReceived);\r\n}\r\n","import { Track } from 'livekit-client';\r\nimport { map, startWith } from 'rxjs';\r\nimport { observeParticipantMedia } from '../observables/participant';\r\nimport { prefixClass } from '../styles-interface';\r\nimport { isTrackReference } from '../track-reference/track-reference.types';\r\nimport type { TrackIdentifier } from '../types';\r\n\r\nexport function setupMediaTrack(trackIdentifier: TrackIdentifier) {\r\n  const initialPub = getTrackByIdentifier(trackIdentifier);\r\n  const trackObserver = observeParticipantMedia(trackIdentifier.participant).pipe(\r\n    map(() => {\r\n      return getTrackByIdentifier(trackIdentifier);\r\n    }),\r\n    startWith(initialPub),\r\n  );\r\n  const className: string = prefixClass(\r\n    trackIdentifier.source === Track.Source.Camera ||\r\n      trackIdentifier.source === Track.Source.ScreenShare\r\n      ? 'participant-media-video'\r\n      : 'participant-media-audio',\r\n  );\r\n  return { className, trackObserver };\r\n}\r\n\r\nexport function getTrackByIdentifier(options: TrackIdentifier) {\r\n  if (isTrackReference(options)) {\r\n    return options.publication;\r\n  } else {\r\n    const { source, name, participant } = options;\r\n    if (source && name) {\r\n      return participant.getTracks().find((pub) => pub.source === source && pub.trackName === name);\r\n    } else if (name) {\r\n      return participant.getTrackByName(name);\r\n    } else if (source) {\r\n      return participant.getTrack(source);\r\n    } else {\r\n      throw new Error('At least one of source and name needs to be defined');\r\n    }\r\n  }\r\n}\r\n","import type { ClassNames as ComponentClasses } from '@livekit/components-styles/dist/types/general/index.css';\r\nimport type { ClassNames as PrefabClasses } from '@livekit/components-styles/dist/types/general/prefabs/index.css';\r\nimport type { UnprefixedClassNames as ComponentNoPrefixClasses } from '@livekit/components-styles/dist/types_unprefixed/index.scss';\r\nimport type { UnprefixedClassNames as PrefabNoPrefixClasses } from '@livekit/components-styles/dist/types_unprefixed/prefabs/index.scss';\r\nimport { cssPrefix } from './../constants';\r\n\r\ntype UnprefixedClassNames = ComponentNoPrefixClasses | PrefabNoPrefixClasses;\r\ntype Classes = PrefabClasses | ComponentClasses;\r\n\r\n/**\r\n * This function is a type safe way to add a prefix to a HTML class attribute.\r\n * Only classes defined in the styles module are valid, any other class produces a ts error.\r\n * @internal\r\n */\r\nexport function prefixClass(unprefixedClassName: UnprefixedClassNames): Classes {\r\n  // @ts-ignore\r\n  return `${cssPrefix}-${unprefixedClassName}`;\r\n}\r\n\r\nexport function kebabize(str: string) {\r\n  return str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? '-' : '') + $.toLowerCase());\r\n}\r\n","import type { LocalAudioTrack, LocalVideoTrack, Room } from 'livekit-client';\r\nimport { Track } from 'livekit-client';\r\nimport { BehaviorSubject, map, mergeWith } from 'rxjs';\r\nimport log from '../logger';\r\nimport { observeParticipantMedia } from '../observables/participant';\r\nimport { prefixClass } from '../styles-interface';\r\n\r\nexport function setupDeviceSelector(kind: MediaDeviceKind, room?: Room) {\r\n  const activeDeviceSubject = new BehaviorSubject<string | undefined>(undefined);\r\n\r\n  const activeDeviceObservable = room\r\n    ? observeParticipantMedia(room.localParticipant).pipe(\r\n        map((participantMedia) => {\r\n          let localTrack: LocalAudioTrack | LocalVideoTrack | undefined;\r\n          switch (kind) {\r\n            case 'videoinput':\r\n              localTrack = participantMedia.cameraTrack?.track as LocalAudioTrack;\r\n              break;\r\n            case 'audioinput':\r\n              localTrack = participantMedia.microphoneTrack?.track as LocalVideoTrack;\r\n              break;\r\n            default:\r\n              localTrack = undefined;\r\n              break;\r\n          }\r\n          return localTrack?.mediaStreamTrack.getSettings()?.deviceId;\r\n        }),\r\n        mergeWith(activeDeviceSubject),\r\n      )\r\n    : activeDeviceSubject.asObservable();\r\n\r\n  const setActiveMediaDevice = async (id: string) => {\r\n    if (room) {\r\n      log.debug(`Switching active device of kind \"${kind}\" with id ${id}.`);\r\n      await room.switchActiveDevice(kind, id);\r\n      let actualDeviceId: string | undefined = id;\r\n      if (kind === 'videoinput') {\r\n        actualDeviceId = await room.localParticipant\r\n          .getTrack(Track.Source.Camera)\r\n          ?.track?.getDeviceId();\r\n      } else if (kind === 'audioinput') {\r\n        actualDeviceId = await room.localParticipant\r\n          .getTrack(Track.Source.Microphone)\r\n          ?.track?.getDeviceId();\r\n      }\r\n      if (actualDeviceId !== id && id !== 'default') {\r\n        log.warn(`Failed to select the desired device. Desired: ${id}. Actual: ${actualDeviceId}`);\r\n      }\r\n      activeDeviceSubject.next(id === 'default' ? id : actualDeviceId);\r\n    } else {\r\n      log.debug('Skip the device switch because the room object is not available. ');\r\n      activeDeviceSubject.next(id);\r\n    }\r\n  };\r\n  const className: string = prefixClass('media-device-select');\r\n  return {\r\n    className,\r\n    activeDeviceObservable,\r\n    setActiveMediaDevice,\r\n  };\r\n}\r\n","import type { Room } from 'livekit-client';\r\nimport { prefixClass } from '../styles-interface';\r\n\r\nexport function setupDisconnectButton(room: Room) {\r\n  const disconnect = (stopTracks?: boolean) => {\r\n    room.disconnect(stopTracks);\r\n  };\r\n  const className: string = prefixClass('disconnect-button');\r\n  return { className, disconnect };\r\n}\r\n","import type { Participant } from 'livekit-client';\r\nimport { createConnectionQualityObserver } from '../observables/participant';\r\nimport { prefixClass } from '../styles-interface';\r\n\r\nexport function setupConnectionQualityIndicator(participant: Participant) {\r\n  const className = prefixClass('connection-quality');\r\n  const connectionQualityObserver = createConnectionQualityObserver(participant);\r\n  return { className, connectionQualityObserver };\r\n}\r\n","import type { Styles } from '@livekit/components-styles/dist/types_unprefixed/index.scss';\r\nimport type { Participant } from 'livekit-client';\r\nimport { Track } from 'livekit-client';\r\nimport { mutedObserver } from '../observables/participant';\r\nimport { prefixClass } from '../styles-interface';\r\n\r\nexport function setupTrackMutedIndicator(participant: Participant, source: Track.Source) {\r\n  let classForSource: keyof Styles = 'track-muted-indicator-camera';\r\n  switch (source) {\r\n    case Track.Source.Camera:\r\n      classForSource = 'track-muted-indicator-camera';\r\n      break;\r\n    case Track.Source.Microphone:\r\n      classForSource = 'track-muted-indicator-microphone';\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n  const className: string = prefixClass(classForSource);\r\n  const mediaMutedObserver = mutedObserver(participant, source);\r\n\r\n  return { className, mediaMutedObserver };\r\n}\r\n","import type { Participant } from 'livekit-client';\r\nimport { participantInfoObserver } from '../observables/participant';\r\n\r\nexport function setupParticipantName(participant: Participant) {\r\n  const infoObserver = participantInfoObserver(participant);\r\n  return { className: 'lk-participant-name', infoObserver };\r\n}\r\n","import { prefixClass } from '../styles-interface';\r\n\r\nexport function setupParticipantTile() {\r\n  const className: string = prefixClass('participant-tile');\r\n  return {\r\n    className,\r\n  };\r\n}\r\n","/* eslint-disable camelcase */\r\nimport type { Participant, Room } from 'livekit-client';\r\nimport { DataPacket_Kind } from 'livekit-client';\r\nimport { BehaviorSubject, Subject, scan, map, takeUntil } from 'rxjs';\r\nimport { DataTopic, sendMessage, setupDataMessageHandler } from '../observables/dataChannel';\r\n\r\nexport interface ChatMessage {\r\n  timestamp: number;\r\n  message: string;\r\n}\r\n\r\nexport interface ReceivedChatMessage extends ChatMessage {\r\n  from?: Participant;\r\n}\r\n\r\nconst encoder = new TextEncoder();\r\nconst decoder = new TextDecoder();\r\n\r\nexport function setupChat(room: Room) {\r\n  const onDestroyObservable = new Subject<void>();\r\n  const messageSubject = new Subject<{\r\n    payload: Uint8Array;\r\n    topic: string | undefined;\r\n    from: Participant | undefined;\r\n  }>();\r\n\r\n  /** Subscribe to all messages send over the wire. */\r\n  const { messageObservable } = setupDataMessageHandler(room, DataTopic.CHAT);\r\n  messageObservable.pipe(takeUntil(onDestroyObservable)).subscribe(messageSubject);\r\n\r\n  /** Build up the message array over time. */\r\n  const messagesObservable = messageSubject.pipe(\r\n    map((msg) => {\r\n      const parsedMessage = JSON.parse(decoder.decode(msg.payload)) as ChatMessage;\r\n      const newMessage: ReceivedChatMessage = { ...parsedMessage, from: msg.from };\r\n      return newMessage;\r\n    }),\r\n    scan<ReceivedChatMessage, ReceivedChatMessage[]>((acc, value) => [...acc, value], []),\r\n    takeUntil(onDestroyObservable),\r\n  );\r\n\r\n  const isSending$ = new BehaviorSubject<boolean>(false);\r\n\r\n  const send = async (message: string) => {\r\n    const timestamp = Date.now();\r\n    const encodedMsg = encoder.encode(JSON.stringify({ timestamp, message }));\r\n    isSending$.next(true);\r\n    try {\r\n      await sendMessage(room.localParticipant, encodedMsg, DataTopic.CHAT, {\r\n        kind: DataPacket_Kind.RELIABLE,\r\n      });\r\n      messageSubject.next({\r\n        payload: encodedMsg,\r\n        topic: DataTopic.CHAT,\r\n        from: room.localParticipant,\r\n      });\r\n    } finally {\r\n      isSending$.next(false);\r\n    }\r\n  };\r\n\r\n  function destroy() {\r\n    onDestroyObservable.next();\r\n    onDestroyObservable.complete();\r\n  }\r\n\r\n  return { messageObservable: messagesObservable, isSendingObservable: isSending$, send, destroy };\r\n}\r\n","import type { LocalParticipant, Participant, Room } from 'livekit-client';\r\nimport { DataPacket_Kind } from 'livekit-client';\r\nimport type { Subscriber } from 'rxjs';\r\nimport { Observable, filter, map } from 'rxjs';\r\nimport { createDataObserver } from './room';\r\n\r\nexport const DataTopic = {\r\n  CHAT: 'lk-chat-topic',\r\n} as const;\r\n\r\nexport type DataSendOptions = {\r\n  kind?: DataPacket_Kind;\r\n  destination?: string[];\r\n};\r\n\r\n/** Publish data from the LocalParticipant. */\r\nexport async function sendMessage(\r\n  localParticipant: LocalParticipant,\r\n  payload: Uint8Array,\r\n  topic?: string,\r\n  options: DataSendOptions = {},\r\n) {\r\n  const { kind, destination } = options;\r\n\r\n  await localParticipant.publishData(payload, kind ?? DataPacket_Kind.RELIABLE, {\r\n    destination,\r\n    topic,\r\n  });\r\n}\r\n\r\nexport interface BaseDataMessage<T extends string | undefined> {\r\n  topic?: T;\r\n  payload: Uint8Array;\r\n}\r\n\r\nexport interface ReceivedDataMessage<T extends string | undefined = string>\r\n  extends BaseDataMessage<T> {\r\n  from?: Participant;\r\n}\r\n\r\nexport function setupDataMessageHandler<T extends string>(\r\n  room: Room,\r\n  topic?: T,\r\n  onMessage?: (msg: ReceivedDataMessage<T>) => void,\r\n) {\r\n  /** Setup a Observable that returns all data messages belonging to a topic. */\r\n  const messageObservable = createDataObserver(room).pipe(\r\n    filter(([, , , messageTopic]) => messageTopic === undefined || messageTopic === topic),\r\n    map(([payload, participant, , messageTopic]) => {\r\n      const msg = {\r\n        payload,\r\n        topic: messageTopic as T,\r\n        from: participant,\r\n      } satisfies ReceivedDataMessage<T>;\r\n      onMessage?.(msg);\r\n      return msg;\r\n    }),\r\n  );\r\n\r\n  let isSendingSubscriber: Subscriber<boolean>;\r\n  const isSendingObservable = new Observable<boolean>((subscriber) => {\r\n    isSendingSubscriber = subscriber;\r\n  });\r\n\r\n  const send = async (payload: Uint8Array, options: DataSendOptions = {}) => {\r\n    isSendingSubscriber.next(true);\r\n    try {\r\n      await sendMessage(room.localParticipant, payload, topic, options);\r\n    } finally {\r\n      isSendingSubscriber.next(false);\r\n    }\r\n  };\r\n\r\n  return { messageObservable, isSendingObservable, send };\r\n}\r\n","import type { Room } from 'livekit-client';\r\nimport { RoomEvent } from 'livekit-client';\r\nimport { map } from 'rxjs';\r\nimport log from '../logger';\r\nimport { observeRoomEvents } from '../observables/room';\r\nimport { prefixClass } from '../styles-interface';\r\n\r\nfunction roomAudioPlaybackAllowedObservable(room: Room) {\r\n  const observable = observeRoomEvents(room, RoomEvent.AudioPlaybackStatusChanged).pipe(\r\n    map((room) => {\r\n      return { canPlayAudio: room.canPlaybackAudio };\r\n    }),\r\n  );\r\n  return observable;\r\n}\r\n\r\nexport function setupStartAudio() {\r\n  const handleStartAudioPlayback = async (room: Room) => {\r\n    log.info('Start Audio for room: ', room);\r\n    await room.startAudio();\r\n  };\r\n  const className: string = prefixClass('start-audio-button');\r\n  return { className, roomAudioPlaybackAllowedObservable, handleStartAudioPlayback };\r\n}\r\n","import { prefixClass } from '../styles-interface';\r\n\r\nexport function setupChatToggle() {\r\n  const className: string = [prefixClass('button'), prefixClass('chat-toggle')].join(' ');\r\n  return { className };\r\n}\r\n","import { prefixClass } from '../styles-interface';\r\n\r\nexport function setupShareLinkToggle() {\r\n  const className: string = [prefixClass('button')].join(' ');\r\n  return { className };\r\n}\r\n","import { prefixClass } from '../styles-interface';\r\n\r\nexport function setupUserToggle() {\r\n  const className: string = [prefixClass('button')].join(' ');\r\n  return { className };\r\n}\r\n","import { prefixClass } from '../styles-interface';\r\n\r\nexport function setupFocusToggle() {\r\n  const className: string = [prefixClass('button'), prefixClass('focus-toggle-button')].join(' ');\r\n  return { className };\r\n}\r\n","// import { prefixClass } from '../styles-interface';\r\n\r\nexport function setupClearPinButton() {\r\n  // const className = prefixClass('clear-pin-button');\r\n  const className = 'lk-clear-pin-button lk-button';\r\n  return { className };\r\n}\r\n","export function setupLiveKitRoom() {\r\n  const className = 'lk-room-container';\r\n  return { className };\r\n}\r\n","import type {\r\n  LocalTrackPublication,\r\n  Participant,\r\n  RemoteTrackPublication,\r\n  Room,\r\n  Track,\r\n  TrackPublication,\r\n} from 'livekit-client';\r\nimport { RoomEvent, TrackEvent } from 'livekit-client';\r\nimport { map, Observable, startWith } from 'rxjs';\r\nimport { allParticipantRoomEvents } from '../helper';\r\nimport log from '../logger';\r\nimport type { TrackReference } from '../track-reference';\r\nimport { observeRoomEvents } from './room';\r\n\r\nexport function trackObservable(track: TrackPublication) {\r\n  const trackObserver = observeTrackEvents(\r\n    track,\r\n    TrackEvent.Muted,\r\n    TrackEvent.Unmuted,\r\n    TrackEvent.Subscribed,\r\n    TrackEvent.Unsubscribed,\r\n  );\r\n\r\n  return trackObserver;\r\n}\r\n\r\nexport function observeTrackEvents(track: TrackPublication, ...events: TrackEvent[]) {\r\n  const observable = new Observable<TrackPublication>((subscribe) => {\r\n    const onTrackUpdate = () => {\r\n      subscribe.next(track);\r\n    };\r\n\r\n    events.forEach((evt) => {\r\n      // @ts-expect-error type of `TrackEvent` and `PublicationCallbacks` are congruent\r\n      track.on(evt, onTrackUpdate);\r\n    });\r\n\r\n    const unsubscribe = () => {\r\n      events.forEach((evt) => {\r\n        // @ts-expect-error type of `TrackEvent` and `PublicationCallbacks` are congruent\r\n        track.off(evt, onTrackUpdate);\r\n      });\r\n    };\r\n    return unsubscribe;\r\n  }).pipe(startWith(track));\r\n\r\n  return observable;\r\n}\r\n\r\n/**\r\n * Create `TrackReferences` for all tracks that are included in the sources property.\r\n *  */\r\nfunction getTrackReferences(\r\n  room: Room,\r\n  sources: Track.Source[],\r\n  onlySubscribedTracks = true,\r\n): { trackReferences: TrackReference[]; participants: Participant[] } {\r\n  const localParticipant = room.localParticipant;\r\n  const allParticipants = [localParticipant, ...Array.from(room.participants.values())];\r\n  const trackReferences: TrackReference[] = [];\r\n\r\n  allParticipants.forEach((participant) => {\r\n    sources.forEach((source) => {\r\n      const sourceReferences = Array.from<RemoteTrackPublication | LocalTrackPublication>(\r\n        participant.tracks.values(),\r\n      )\r\n        .filter(\r\n          (track) =>\r\n            track.source === source &&\r\n            // either return all or only the ones that are subscribed\r\n            (!onlySubscribedTracks || track.track),\r\n        )\r\n        .map((track) => {\r\n          return {\r\n            participant: participant,\r\n            publication: track,\r\n            track: track.track,\r\n            source: track.source,\r\n          };\r\n        });\r\n\r\n      trackReferences.push(...sourceReferences);\r\n    });\r\n  });\r\n\r\n  return { trackReferences, participants: allParticipants };\r\n}\r\n\r\ntype TrackReferencesObservableOptions = {\r\n  additionalRoomEvents?: RoomEvent[];\r\n  onlySubscribed?: boolean;\r\n};\r\n\r\nexport function trackReferencesObservable(\r\n  room: Room,\r\n  sources: Track.Source[],\r\n  options: TrackReferencesObservableOptions,\r\n): Observable<{ trackReferences: TrackReference[]; participants: Participant[] }> {\r\n  const additionalRoomEvents = options.additionalRoomEvents ?? allParticipantRoomEvents;\r\n  const onlySubscribedTracks: boolean = options.onlySubscribed ?? true;\r\n  const roomEvents = Array.from(\r\n    new Set([\r\n      RoomEvent.ParticipantConnected,\r\n      RoomEvent.ConnectionStateChanged,\r\n      RoomEvent.LocalTrackPublished,\r\n      RoomEvent.LocalTrackUnpublished,\r\n      RoomEvent.TrackPublished,\r\n      RoomEvent.TrackUnpublished,\r\n      RoomEvent.TrackSubscriptionStatusChanged,\r\n      ...additionalRoomEvents,\r\n    ]).values(),\r\n  );\r\n\r\n  const observable = observeRoomEvents(room, ...roomEvents).pipe(\r\n    map((room) => {\r\n      const data = getTrackReferences(room, sources, onlySubscribedTracks);\r\n      log.debug(`TrackReference[] was updated. (length ${data.trackReferences.length})`, data);\r\n      return data;\r\n    }),\r\n    startWith(getTrackReferences(room, sources, onlySubscribedTracks)),\r\n  );\r\n\r\n  return observable;\r\n}\r\n","import type { Observable } from 'rxjs';\r\nimport { concat, distinctUntilChanged, fromEvent, map, of, skipUntil, timeout } from 'rxjs';\r\n\r\n/**\r\n * Returns true if the user is interacting with the HTML element,\r\n * and returns false if there is no interaction for a specified period of time.\r\n *\r\n * @internal\r\n */\r\nexport function createInteractingObservable(htmlElement: HTMLElement | null, inactiveAfter = 1000) {\r\n  if (htmlElement === null) return of(false);\r\n  const move$ = fromEvent(htmlElement, 'mousemove').pipe(map(() => true));\r\n  const moveAndStop$: Observable<boolean> = move$.pipe(\r\n    timeout({\r\n      each: inactiveAfter,\r\n      with: () => concat(of(false), moveAndStop$.pipe(skipUntil(move$))),\r\n    }),\r\n    distinctUntilChanged(),\r\n  );\r\n  return moveAndStop$;\r\n}\r\n","export * from './constants';\r\nexport * from './utils';\r\nexport * from './helper';\r\nexport * from './types';\r\nexport * from './sorting';\r\nexport * from './track-reference';\r\n\r\nexport * from './components/mediaToggle';\r\nexport * from './components/mediaDeviceSelect';\r\nexport * from './components/disconnectButton';\r\nexport * from './components/mediaTrack';\r\nexport * from './components/connectionQualityIndicator';\r\nexport * from './components/trackMutedIndicator';\r\nexport * from './components/participantName';\r\nexport * from './components/mediaTrack';\r\nexport * from './components/participantTile';\r\nexport * from './components/chat';\r\nexport * from './components/startAudio';\r\nexport * from './components/chatToggle';\r\nexport * from './components/shareLinkToggle';\r\nexport * from './components/userToggle';\r\nexport * from './components/focusToggle';\r\nexport * from './components/clearPinButton';\r\nexport * from './components/room';\r\n\r\nexport * from './observables/room';\r\nexport * from './observables/participant';\r\nexport * from './observables/track';\r\nexport * from './observables/dataChannel';\r\nexport * from './observables/dom-event';\r\n\r\nimport logger from './logger';\r\nexport const log = logger;\r\n"],"mappings":"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","names":["Track","Track","LocalParticipant","LocalParticipant","Track","Track","Subject","map","startWith","ParticipantEvent","RoomEvent","Track","map","Observable","startWith","RoomEvent","Track","RoomEvent","Track","participant","_a","Track","map","startWith","map","startWith","Track","Observable","startWith","ParticipantEvent","map","Track","participant","_a","RoomEvent","source","localParticipant","Track","map","startWith","Subject","Track","map","map","Track","Track","Track","DataPacket_Kind","BehaviorSubject","Subject","map","Observable","map","map","Observable","Subject","map","BehaviorSubject","DataPacket_Kind","RoomEvent","map","RoomEvent","map","room","RoomEvent","map","Observable","startWith","Observable","startWith","RoomEvent","map","room","map","log"]}